#include <msp430.h> 

int main(void)
{
    WDTCTL = WDTPW | WDTHOLD;           // Stop watchdog timer
    P1DIR |= BIT0;                      // Sets P1.0 to be an output
    P1DIR &= ~BIT1;                     // Sets P1.1 to be an input
    P4DIR |= BIT7;                      // Sets P4.7 to be an output

    TB0CTL = TASSEL_1 + MC_1 + ID_3;    // Clock source is ACLK, count up to CCR0, clock divide by 8
    TB0CCTL0 = CCIE;                    // Enables interrupt
    TB0CCR0 = 150;                      // Sets Capture/Compare register to be initially 150
    P1IE |= BIT1;                       // Enables button to cause interrupt
    P1IES |= BIT1;                      // Sets the edge for the interrupt to rising edge
    P1REN |= BIT1;                      // Enable pull up resistor for P1.1 (Button)
    P1OUT |= BIT1;                      // Set resistor as a pull up
    P1IFG &=~BIT1;                      // Clears the interrupt flag

    _BIS_SR(LPM0_bits + GIE);           // Enables low power mode 0 w/interrupt
    return 0;
}
#pragma vector = PORT1_VECTOR;
__interrupt void Button_down(void)      //Button Based Delay
{
    if(P1IES & BIT1){                   // If the rising edge of the button is detected
        P1IES &= ~BIT1;                 // Sets the edge for the interrupt to falling edge
        TBCTL = TBCLR;                  // Clear the timer
        TB0CTL=TASSEL_1 + MC_2 + ID_3;  // Clock source is ACLK, set to continuous mode, clock divide by 8
        P4OUT |= BIT7;                  // Sets P4.7 (Green LED) to be on
    }else{
        P4OUT &= ~BIT7;                 // Sets P4.7 to be off
        TB0CTL = MC_0;                  // Turns off Clock
        TB0CCR0 = TB0R;                 // Sets Capture/Compare register to the Clock register
        TBCTL = TBCLR;                  // Clears the timer
        TB0CTL=TASSEL_1 + MC_1 + ID_3;  // Clock source is ACLK, count up to CCR0, clock divide by 8
        P1IES |=BIT1;                   // Sets the edge for the interrupt to rising edge
    }
    
    P1IFG &= ~BIT1;                     // Clear flags


}
#pragma vector=TIMER0_B0_VECTOR         
__interrupt void TIMER0_A0(void) {      //Toggling LED on and off
                                        
    P1OUT ^= BIT0;                      //timer A0 toggle LED P1.0

}
