#include <msp430.h> 

int main(void)
{
    WDTCTL = WDTPW | WDTHOLD;           // Stop watchdog timer
    BCSCTL3 = LFXT1S_2;                 // Tell the MC to activate the internal crystal
    P1DIR |= BIT0;                      // Sets P1.0 to be an output
    P1DIR &= ~BIT3;                     // Sets P1.3 to be an input
    P1DIR |= BIT6;                      // Sets P1.6 to be an output
    P1OUT &= ~BIT6;                     // Set P1.6 output to be initially zero
    P1REN |= BIT3;                      // Enables the pull up-down resistor
    P1OUT |= BIT3;                      // Sets the pull down resistor


    TA0CTL=TASSEL_1 + MC_1 + ID_3;      // Clock source is ACLK, count up to CCR0, clock divide by 8
    CCTL0 = CCIE;                       // Enables interrupt
    CCR0 = 150;                         // Sets Capture/Compare register to be initially 150
    P1IE |= BIT3;                       // Enables button to cause interrupt
    P1IES |=BIT3;                       // Sets the edge for the interrupt to rising edge
    P1IFG &=~BIT3;                      // Clears the interrupt flag
    _BIS_SR(LPM0_bits + GIE);           // Enables low power mode 0 w/interrupt
    return 0;
}
#pragma vector = PORT1_VECTOR;
__interrupt void Port_1(void)           //Button Based Delay
{
    if(P1IES & BIT3){                   // If the rising edge of the button is detected
        P1IES &= ~BIT3;                 // Sets the edge for the interrupt to falling edge
        TACTL = TACLR;                  // Clear the timer
        TA0CTL=TASSEL_1 + MC_2 + ID_3;  // Clock source is ACLK, set to continuous mode, clock divide by 8
        P1OUT |= BIT6;                  // Sets P1.6 (Green LED) to be on
    }else{
        P1OUT &= ~BIT6;                 // Sets P1.6 to be off
        TA0CTL = MC_0;                  // Turns off Clock
        CCR0 = TA0R;                    // Sets Capture/Compare register to the Clock register
        TACTL = TACLR;                  // Clears the timer
        TA0CTL=TASSEL_1 + MC_1 + ID_3;  // Clock source is ACLK, count up to CCR0, clock divide by 8
        P1IES |=BIT3;                   // Sets to rising edge
    }
    P1IFG &= ~BIT3;                     // Clear flags


}
#pragma vector=TIMER0_A0_VECTOR
__interrupt void TIMER0_A0(void) {
                                        //timer 0 toggle LED P1.0
    P1OUT ^= BIT0;

}
